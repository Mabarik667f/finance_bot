from aiogram import Router, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.state import default_state
from aiogram.types import Message, CallbackQuery
from lexicon.lexicon import LEXICON
from keyboards.kb import kb_main_menu_markup, inline_stat_markup, error_markup
from bot import FSMWriteFinance
from aiogram.fsm.context import FSMContext
from models.methods import get_or_create_user, add_transaction
from services.services import get_stat_data, get_date


import re

router = Router()


@router.message(CommandStart(), StateFilter(default_state))
async def cmd_start(message: Message):
    """–í—ã–≤–æ–¥ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥"""

    get_or_create_user(message.from_user.id, message.from_user.first_name)

    await message.answer(text=LEXICON['/start'],
                         reply_markup=kb_main_menu_markup)


@router.message(Command(commands='help'), StateFilter(default_state))
async def cmd_help(message: Message):
    """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥, –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    await message.answer(text=LEXICON['/help'])


@router.message(Command(commands='cancel'), StateFilter(default_state))
async def cmd_error_cancel(message: Message):
    """–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–∫–∏"""
    await message.answer(text=LEXICON['error_cancel'])


@router.message(Command(commands='cancel'), ~StateFilter(default_state))
async def cmd_cancel_command_state(message: Message, state: FSMContext):
    """–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–∫–∏"""
    await message.answer(
        text=LEXICON['/cancel']
    )

    await state.clear()  # —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ default


@router.callback_query(F.data == 'cancel', StateFilter(default_state))
async def cmd_error_cancel(callback: CallbackQuery):
    """–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ –≤–∏–¥–µ alias"""
    await callback.answer(text=LEXICON['error_cancel'])


@router.callback_query(F.data == 'cancel', ~StateFilter(default_state))
async def cmd_cancel_command_state(callback: CallbackQuery, state: FSMContext):
    """–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –≤–∏–¥–µ alias"""
    await callback.answer(
        text=LEXICON['/cancel']
    )

    await state.clear()


@router.message(Command(commands='day'), StateFilter(default_state))
async def cmd_selected_day(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–µ–Ω—å –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await message.answer(text=LEXICON['selected_day'],
                         reply_markup=error_markup)

    await state.set_state(FSMWriteFinance.fill_day)  # –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–Ω—è


@router.message(StateFilter(FSMWriteFinance.fill_day),
                lambda message: re.search(r'^\d{4}[-.]\d{2}[-.]\d{2}$', message.text.strip()))
async def cmd_selected_day_answer(message: Message):
    """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    get_stat_data(message, start_date=message.text.strip(), end_date=message.text.strip())

    await message.answer(text=LEXICON['cur_stat'])


@router.message(StateFilter(FSMWriteFinance.fill_day))
async def cmd_error_selected_day_answer(message: Message):
    """–í—ã–≤–æ–¥ –æ—à–∏–±–∫–∏ –≤ —Å–ª—É—á–∞–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –¥–Ω—è"""
    await message.answer(text=LEXICON['error_day_format'],
                         reply_markup=error_markup)


@router.message(Command(commands='date'), StateFilter(default_state))
async def cmd_selected_day(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–∏–æ–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await message.answer(text=LEXICON['selected_date'],
                         reply_markup=error_markup)

    await state.set_state(FSMWriteFinance.fill_date)  # –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞


@router.message(StateFilter(FSMWriteFinance.fill_date),
                lambda message: re.search(r'^\d{4}[-.]\d{2}[-.]\d{2}\s*,\s*\d{4}[-.]\d{2}[-.]\d{2}$',
                                          message.text.strip()))
async def cmd_selected_day_answer(message: Message):
    """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    start, end = message.text.strip().split(',')
    get_stat_data(message, start_date=start, end_date=end)

    await message.answer(text=LEXICON['cur_stat'])


@router.message(StateFilter(FSMWriteFinance.fill_date))
async def cmd_error_selected_day_answer(message: Message):
    """–í—ã–≤–æ–¥ –æ—à–∏–±–∫–∏ –≤ —Å–ª—É—á–∞–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞"""
    await message.answer(text=LEXICON['error_date_format'],
                         reply_markup=error_markup)


# –†–∞—Å—Ö–æ–¥
@router.message(F.text == '- –°—Ç–∞—Ç—å—è —Ä–∞—Å—Ö–æ–¥–æ–≤ üí≥')
async def cmd_expenses_process(message: Message, state: FSMContext):
    """–ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å"""
    await message.answer(text=LEXICON['enter_expanses'])

    await state.set_state(FSMWriteFinance.fill_minus)  # –ø–µ—Ä–µ—Ö–æ–¥ –≤ –æ–∂–∏–¥–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞


@router.message(StateFilter(FSMWriteFinance.fill_minus),
                lambda message: re.search(r'^-\s*\d+(\.\d+)?$', message.text.strip()))
async def cmd_expanses_process(message: Message):
    """–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞"""
    add_transaction(message.from_user.id,
                    income=message.text[1:].strip(),
                    transaction=2)  # 2 —ç—Ç–æ —Ç–∏–ø '—Ä–∞—Å—Ö–æ–¥'

    await message.answer(text=LEXICON['add_expanses'])


@router.message(StateFilter(FSMWriteFinance.fill_minus))
async def cmd_error_write_income(message: Message):
    """–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ —à–∞–±–ª–æ–Ω–∞"""
    await message.answer(text=LEXICON['error_add_expanses'],
                         reply_markup=error_markup)


# –î–æ—Ö–æ–¥
@router.message(F.text == '+ –°—Ç–∞—Ç—å—è –¥–æ—Ö–æ–¥–æ–≤ üí∞')
async def cmd_income_process(message: Message, state: FSMContext):
    """–ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –¥–æ—Ö–æ–¥ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å"""
    await message.answer(text=LEXICON['enter_income'])

    await state.set_state(FSMWriteFinance.fill_plus)  # –ø–µ—Ä–µ—Ö–æ–¥ –≤ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–∞


@router.message(StateFilter(FSMWriteFinance.fill_plus),
                lambda message: re.search(r'^\+\s*\d+(\.\d+)?$', message.text.strip()))
async def cmd_write_income(message: Message):
    """–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Ö–æ–¥–∞"""
    add_transaction(message.from_user.id,
                    income=message.text[1:].strip(),
                    transaction=1)  # 1 is income

    await message.answer(text=LEXICON['add_income'])


@router.message(StateFilter(FSMWriteFinance.fill_plus))
async def cmd_error_write_income(message: Message):
    """–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ —à–∞–±–ª–æ–Ω–∞"""
    await message.answer(text=LEXICON['error_add_income'],
                         reply_markup=error_markup)


@router.message(Command('stat'), StateFilter(default_state))
async def cmd_stat_process(message: Message):
    """–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö"""
    await message.answer(text=LEXICON['/stat'],
                         reply_markup=inline_stat_markup)


@router.callback_query(F.data.in_(
    ['stat_year',
     'stat_month',
     'stat_week',
     'stat_day']), StateFilter(default_state))
async def cmd_date_process(callback: CallbackQuery):
    """–í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    try:
        if callback.data == 'stat_year':
            get_stat_data(callback, start_date=get_date(365))
        elif callback.data == 'stat_month':
            get_stat_data(callback, start_date=get_date(30))
        elif callback.data == 'stat_week':
            get_stat_data(callback, start_date=get_date(7))
        elif callback.data == 'stat_day':
            get_stat_data(callback)
        await callback.message.edit_text(text=LEXICON['cur_stat'],
                                         reply_markup=inline_stat_markup)
    except TelegramBadRequest:  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –æ–¥–Ω—É –∏ —Ç—É –∂–µ –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ
        await callback.answer()
