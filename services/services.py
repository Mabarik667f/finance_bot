from datetime import datetime, timedelta

from aiogram.types import CallbackQuery, Message

from lexicon.lexicon import LEXICON
from models.methods import get_finance_request

# –¥–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
default_date = datetime.today().strftime('%Y-%m-%d')


def get_date(days: int) -> str:
    """–í—ã—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–æ –∫–∞–∫–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ"""
    df_date = datetime.strptime(default_date, '%Y-%m-%d')
    start_d = df_date - timedelta(days=days)
    start_date_formatted = start_d.strftime('%Y-%m-%d')

    return start_date_formatted


def get_stat_data(request: (CallbackQuery, Message),
                  start_date=default_date,
                  end_date=default_date) -> None:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    total_expense, total_income = get_finance_request(request.from_user.id,
                                                      start_date=start_date,
                                                      end_date=end_date)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –≤ –æ–±—ä–µ–∫—Ç—ã datetime
    start_d = datetime.strptime(start_date, "%Y-%m-%d")
    end_d = datetime.strptime(end_date, "%Y-%m-%d")

    # –†–∞—Å—á–µ—Ç —Ä–∞–∑–Ω–∏—Ü—ã –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏
    delta = end_d - start_d

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π (—Å —Ä–∞–∑–Ω–∏—Ü–µ–π –≤ –¥–Ω—è—Ö)
    number_of_days = delta.days
    if number_of_days != 0:
        total_inc = total_income / number_of_days
        total_exp = total_expense / number_of_days
    else:
        total_inc = total_income
        total_exp = total_expense

    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
    if total_expense == 0 and total_income == 0:
        LEXICON['cur_stat'] = LEXICON['no_data']
        return

    LEXICON['cur_stat'] = f'–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ üí∞ –∑–∞ –¥–µ–Ω—å: {round(total_inc, 1)}‚ÇΩ\n' \
                          f'–°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ üí≥ –∑–∞ –¥–µ–Ω—å: {round(total_exp, 1)}‚ÇΩ\n' \
                          f'\n' \
                          f'–†–∞—Å—Ö–æ–¥: {total_expense}‚ÇΩ\n' \
                          f'–î–æ—Ö–æ–¥: {total_income}‚ÇΩ\n'
